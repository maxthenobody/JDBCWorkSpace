package com.kh.chap02_crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.kh.model.vo.Member;
//import oracle.jdbc.driver.OracleDriver;

public class Crud { // Create(Insert), Read(Select), Update, Delete
	public static void main(String[] args) {
		Crud c = new Crud();
//		c.update();
//		c.delete("user07");
//		c.delete("' or 1=1 --");
		c.selectOne("user01");
	}
	
	public void insert() {
		try {
			// 1) Driver 등록
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) DBMS와 연결
			Connection conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"c##jdbc",
					"jdbc"
					);
			
			// 3) autocommit 설정하기: true(기본값) / false
			conn.setAutoCommit(false);
			
			// 4) Statement 객체 생성
			// Statement: 실행할 SQL문을 완전한 문장형태로 만든 후 실행하는 클래스.
			Statement stmt = conn.createStatement();
			
			String name = "한종윤";
			
			// 5+6) 쿼리문 전달 후 실행결과값 돌려받기
			int updateCount = stmt.executeUpdate("insert into member values('user07', 'pass07', '"+name+"', 'M', 'abc@bb.com',"
					+ "'010-1234-5678', '지구', 99999, sysdate)");
			
			// 7) 트랜잭션 처리
			if (updateCount == 1) {
				// 1행의 데이터가 정상적으로 삽입되었다면
				conn.commit();
			} else {
				conn.rollback();
			}
			
			// 8) 자원반납
			stmt.close();
			conn.close();
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void update() {
		try {
			// 1)
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2)
			Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "c##jdbc", "jdbc");
			
			// 3)
			conn.setAutoCommit(false);
			
			// 4) PreparedStatement
			/* 
			 * - 쿼리문을 미리 준비해두는 문장 클래스
			 * - Statement 의 단점을 보완한 클래스
			 * 1) 데이터 바인딩이 어렵고 가독성이 좋지 못함.
			 * 2) 재사용성이 좋지 못함. (Statement는 실행할 쿼리문을 매번 새롭게 파싱하여 호출)
			 * 3) SQL-Injection 공격을 방어할 수 없다.
			 * 4) 동적 쿼리문을 만들기가 어렵다.
			 * 
			 * - 객체 생성시 실행하고자 하는 쿼리문을 "미완성된" 상태로 객체에 전달하여, 미리 쿼리문을 파싱시키고 쿼리문을 실행하기 직전 "완성된" 쿼리문 형태로 변환시켜서 실행한다. 
			 * 
			 * */
			String sql = "update member set email = ? where member_id = ?";
			
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			// 5) 미완성 쿼리문을 완성형태로 변경
			// pstmt.setXXX(?의 위치값, 대입값);
			// XXX는 대입값의 자료형
			pstmt.setString(1, "hihi@bb.com");
			pstmt.setString(2, "user01");
			
			// 6+7)
			int updateCount = pstmt.executeUpdate();
			
			// 8)
			if (updateCount == 1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
			// 9)
			pstmt.close();
			conn.close();
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// DML(DELETE)
	public void delete(String userId) {
		try {
			// 1) Driver 등록
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) 연결할 드라이버 선택
			Connection conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"c##jdbc",
					"jdbc"
					);
			
			// 3) autocommit 설정
			conn.setAutoCommit(false);
			
			// 4) Connection 객체를 통해 stmt 생성
//			PreparedStatement pstmt = conn.prepareStatement("delete from member where member_id = ?");
			
			// 5) 미완성 SQL문을 완성형태로 만들기
//			pstmt.setString(1, userId);
			// delete from member where member_id = 'user07'
			// ' -- or 1=1
			
			// SQL-Injection 공격 예시
			Statement pstmt = conn.createStatement();
			
			// 6) Execute + Get Result
//			int updateCount = pstmt.executeUpdate();
			int updateCount = pstmt.executeUpdate("delete from member where member_id = '" +userId+"'");
			
			System.out.println("삭제된 행의 개수: " + updateCount);
			
			// 7) 트랜잭션 관리
			if (updateCount == 1) {
				conn.commit();
				System.out.println("커밋완료.");
			} else {
				conn.rollback();
				System.out.println("롤백됨.");
			}
			
			// 8) 자원반납
			pstmt.close();
			conn.close();
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void selectOne(String userId) {
		// 생략
		
		try {
			// 1) Driver 등록
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) 연결할 드라이버 선택
			Connection conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"c##jdbc",
					"jdbc"
					);
			
			// 3) PreparedStatement 생성
			String sql = "select * from member where member_id = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			// SQL 문 완성
			pstmt.setString(1, userId);
			
			// 4, 5) SQL 문 실행 및 결과값 돌려받기
			ResultSet rset = pstmt.executeQuery();
			
			// 6) ResultSet 을 알맞은 vo 클래스로 변환하기.
			/*
			 * ResultSet
			 * - Select 를 호출한 결과 값이 담겨있는 객체.
			 * - 커서(Cursor)를 사용하여 ResultSet의 각 행에 접근할 수 있다.
			 * Cursor ?
			 * - ResultSet 내부에 특정 행을 가리키는 포인터(배열의 인덱스와 비슷).
			 * Cursor 의 위치를 변경하는 메서드들
			 * 1) next(): boolean -> 커서를 다음행으로 이동시키고, 행이 존재 한다면 true, 없다면 false를 반환.
			 * 2) previous(): boolean -> 커서를 이전행으로 이동시키고, 행이 존재한다면 true, 없다면 false를 반환.
			 * 3) first() / last(): boolean -> 커서를 첫번째 / 마지막 행으로 이동시키고, 해당 위치에 행이 존재한다면 true, 아니라면 false를 반환.
			 * 4) absolute(int row): boolean -> 지정된 행위치로 이동시키고, 해당 위치에 행이 존재한다면 true, 아니라면 false를 반환.
			 * 5) relative(int row): boolean -> 현재 행위치의 relative 한 위치로 이동시키고, 해당 위치에 행이 존재한다면 true, 아니라면 false를 반환.
			 * 
			 * 
			 * */
			
			if (rset.next()) { // 0 -> 1
				// 조회 결과가 존재하는 경우
				
				// ResultSet에서 어떤 "칼럼"을, 어떤 "자료형"으로 뽑을지를 제시.
				// 칼럼을 뽑을 때는 1) 칼럼명(대소문자x) 2) 칼럼 순번 둘중 하나를 사용.
				// 자료형을 제시할 때는 1) int/double 2) String 3) Date
				
				Member m = new Member(); // rset의 데이터를 옮겨 담을 객체
				m.setMemberId(rset.getString("member_id"));
				m.setMemberPwd(rset.getString("member_pwd"));
				m.setMemberName(rset.getString("member_name"));
				m.setGender(rset.getString("gender"));
				m.setEmail(rset.getString("email"));
				m.setPhone(rset.getString("phone"));
				m.setAddress(rset.getString("address"));
				m.setAge(rset.getInt("age"));
				m.setEnrollDate(rset.getDate("enroll_date"));
				
				System.out.println(m);
			}
			
			// 7)
			rset.close();
			pstmt.close();
			conn.close();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public void selectAll() {
		
	}
}

















