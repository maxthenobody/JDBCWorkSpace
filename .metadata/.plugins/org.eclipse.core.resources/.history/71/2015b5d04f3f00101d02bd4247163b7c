package com.kh.chap02_crud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import oracle.jdbc.driver.OracleDriver;

public class Crud { // Create(Insert), Read(Select), Update, Delete
	public static void main(String[] args) {
		Crud c = new Crud();
//		c.update();
		c.delete("user07");
		c.delete("' or 1=1 --");
	}
	
	public void insert() {
		try {
			// 1) Driver 등록
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) DBMS와 연결
			Connection conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"c##jdbc",
					"jdbc"
					);
			
			// 3) autocommit 설정하기: true(기본값) / false
			conn.setAutoCommit(false);
			
			// 4) Statement 객체 생성
			// Statement: 실행할 SQL문을 완전한 문장형태로 만든 후 실행하는 클래스.
			Statement stmt = conn.createStatement();
			
			String name = "한종윤";
			
			// 5+6) 쿼리문 전달 후 실행결과값 돌려받기
			int updateCount = stmt.executeUpdate("insert into member values('user07', 'pass07', '"+name+"', 'M', 'abc@bb.com',"
					+ "'010-1234-5678', '지구', 99999, sysdate)");
			
			// 7) 트랜잭션 처리
			if (updateCount == 1) {
				// 1행의 데이터가 정상적으로 삽입되었다면
				conn.commit();
			} else {
				conn.rollback();
			}
			
			// 8) 자원반납
			stmt.close();
			conn.close();
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void update() {
		try {
			// 1)
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2)
			Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "c##jdbc", "jdbc");
			
			// 3)
			conn.setAutoCommit(false);
			
			// 4) PreparedStatement
			/* 
			 * - 쿼리문을 미리 준비해두는 문장 클래스
			 * - Statement 의 단점을 보완한 클래스
			 * 1) 데이터 바인딩이 어렵고 가독성이 좋지 못함.
			 * 2) 재사용성이 좋지 못함. (Statement는 실행할 쿼리문을 매번 새롭게 파싱하여 호출)
			 * 3) SQL-Injection 공격을 방어할 수 없다.
			 * 4) 동적 쿼리문을 만들기가 어렵다.
			 * 
			 * - 객체 생성시 실행하고자 하는 쿼리문을 "미완성된" 상태로 객체에 전달하여, 미리 쿼리문을 파싱시키고 쿼리문을 실행하기 직전 "완성된" 쿼리문 형태로 변환시켜서 실행한다. 
			 * 
			 * */
			String sql = "update member set email = ? where member_id = ?";
			
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			// 5) 미완성 쿼리문을 완성형태로 변경
			// pstmt.setXXX(?의 위치값, 대입값);
			// XXX는 대입값의 자료형
			pstmt.setString(1, "hihi@bb.com");
			pstmt.setString(2, "user01");
			
			// 6+7)
			int updateCount = pstmt.executeUpdate();
			
			// 8)
			if (updateCount == 1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
			// 9)
			pstmt.close();
			conn.close();
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// DML(DELETE)
	public void delete(String userId) {
		try {
			// 1) Driver 등록
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) 연결할 드라이버 선택
			Connection conn = DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:xe",
					"c##jdbc",
					"jdbc"
					);
			
			// 3) autocommit 설정
			conn.setAutoCommit(false);
			
			// 4) Connection 객체를 통해 stmt 생성
//			PreparedStatement pstmt = conn.prepareStatement("delete from member where member_id = ?");
			
			// 5) 미완성 SQL문을 완성형태로 만들기
//			pstmt.setString(1, userId);
			// delete from member where member_id = 'user07'
			// ' -- or 1=1
			
			Statement pstmt = conn.createStatement();
			
			// 6) Execute + Get Result
//			int updateCount = pstmt.executeUpdate();
			int updateCount = pstmt.executeUpdate("delete from member where member_id = '" +userId+"'");
			
			System.out.println("삭제된 행의 개수: " + updateCount);
			
			// 7) 트랜잭션 관리
			if (updateCount == 1) {
				conn.commit();
				System.out.println("커밋완료.");
			} else {
				conn.rollback();
				System.out.println("롤백됨.");
			}
			
			// 8) 자원반납
			pstmt.close();
			conn.close();
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}

















